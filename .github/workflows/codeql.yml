name: "CodeQL Advanced" # 워크플로우의 이름 설정

on: # 워크플로우 트리거를 정의
  push: # main 브랜치에 대한 푸시 이벤트에서 실행
    branches: [ "main" ]
  pull_request: # main 브랜치에 대한 풀 리퀘스트 이벤트에서 실행
    branches: [ "main" ]
  schedule: # 정기적으로 실행되도록 스케줄 설정
    - cron: '41 18 * * 4' # 매주 목요일 오후 6시 41분에 실행

jobs: # 작업 정의
  analyze: # "analyze"라는 이름의 작업 정의
    name: Analyze (${{ matrix.language }}) # 작업 이름에 언어 정보 포함
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }} # Swift 언어의 경우 macOS에서, 그 외의 경우 Ubuntu에서 실행
    
    permissions: # 작업에 필요한 권한 정의
      security-events: write # 보안 이벤트 쓰기 권한
      packages: read # 패키지 읽기 권한
      actions: read # 액션 읽기 권한
      contents: read # 콘텐츠 읽기 권한
    
    strategy: # 전략 정의
      fail-fast: false # 작업 실패 시, 다른 작업도 계속 실행
      matrix: # 행렬 전략을 사용하여 다양한 환경에서 실행
        include:
        - language: java-kotlin # Java 및 Kotlin 언어에 대한 설정
          build-mode: manual # 수동 빌드 모드 설정

    steps: # 작업 내의 단계 정의
    - name: Checkout repository # 리포지토리 체크아웃 단계
      uses: actions/checkout@v3 # 리포지토리를 현재 작업 디렉토리에 체크아웃

    - name: Initialize CodeQL # CodeQL 초기화 단계
      uses: github/codeql-action/init@v3 # CodeQL 초기화 액션 사용
      with:
        languages: ${{ matrix.language }} # 사용할 언어 설정
        queries: security-and-quality # 사용할 쿼리 설정

    - name: Build # 빌드 단계
      run: ./gradlew build  # Gradle 빌드 실행

    - name: Test # 테스트 실행 단계
      run: ./gradlew test   # Gradle 테스트 실행

    - name: Upload test reports # 테스트 결과 업로드 단계
      uses: actions/upload-artifact@v3 # 아티팩트 업로드 액션 사용
      with:
        name: test-reports # 아티팩트 이름
        path: build/reports/tests/test/*.xml  # JUnit 테스트 결과 경로

    - name: Upload HTML reports # HTML 보고서 업로드 단계
      uses: actions/upload-artifact@v3 # 아티팩트 업로드 액션 사용
      with:
        name: html-reports # 아티팩트 이름
        path: build/reports/tests/test/ # HTML 보고서 경로

    - name: Perform CodeQL Analysis # CodeQL 분석 수행 단계
      uses: github/codeql-action/analyze@v3 # CodeQL 분석 액션 사용
      with:
        category: "/language:${{matrix.language}}" # 언어 카테고리 설정
        output: results # 분석 결과 경로 설정

    - name: Upload SARIF file # SARIF 파일 업로드 단계
      uses: actions/upload-artifact@v3 # 아티팩트 업로드 액션 사용
      with:
        name: sarif-results # 아티팩트 이름
        path: results/*.sarif # SARIF 파일 경로

    - name: Set up JDK 21 # JDK 21 설정 단계
      uses: actions/setup-java@v3 # Java 환경 설정 액션 사용
      with:
        java-version: '21' # Java 버전 설정
        distribution: 'temurin' # Temurin 배포판 사용

    - name: Generate PDF report # PDF 보고서 생성 단계
      run: | # 여러 줄 명령 실행
        java -cp build/libs/AUTOCODE-1.0-SNAPSHOT.jar:build/libs/* SarifToPdf results/*.sarif build/reports/pdf/report.pdf # SARIF 파일을 PDF로 변환
      env:
        SARIF_FILE: results/*.sarif  # SARIF 파일 경로 설정

    - name: Upload PDF report # PDF 보고서 업로드 단계
      uses: actions/upload-artifact@v3 # 아티팩트 업로드 액션 사용
      with:
        name: CodeQL-PDF-Report # 아티팩트 이름
        path: build/reports/pdf/report.pdf  # 생성된 PDF 파일 경로